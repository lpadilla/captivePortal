<?php

/**
 * @file
 * Generates and attaches the <meta> and <link> tags needed for the PWA.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\social_pwa\BrowserDetector;

/**
 * Implements hook_page_attachments().
 */
function social_pwa_page_attachments(array &$page) {

  $account = \Drupal::currentUser();
  

  // Check first if sending push notifications is enabled.
  $pwa_enabled = \Drupal::config('social_pwa.settings')->get('status.all');
  if (!$pwa_enabled) {
    return;
  }

  // Get the uploaded icon.
  $icon = \Drupal::config('social_pwa.settings')->get('icons.icon');

  if ($icon === NULL || !isset($icon[0])) {
    return;
  }

  // Get the file id and path.
  $fid = $icon[0];
  $file = File::load($fid);
  $path = $file->getFileUri();

  // Add the public VAPID key.
  $vapid_keys = \Drupal::state()->get('social_pwa.vapid_keys');
  $page['#attached']['drupalSettings']['vapidPublicKey'] = $vapid_keys['public'];


  // Attach the generated data from /manifest.json.
  $page['#attached']['html_head_link'][][] = [
    // Get the contents of the Manifest.
    'rel' => 'manifest',
    'href' => '/manifest.json',
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_pwa_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    return;
  }

  $push_enabled = \Drupal::config('social_pwa.settings')->get('status.all');
  if (!$push_enabled) {
    return;
  }

  // Target user.
  $uid = \Drupal::routeMatch()->getParameter('user')->id();
  // Current user.
  $current_uid = \Drupal::currentUser()->id();

  // Hide the Push notifications fieldset if target and current user is not the
  // same.
  if ($uid !== $current_uid) {
    return;
  }

  // Get the device and subscription information about this user.
  $useragent = $_SERVER['HTTP_USER_AGENT'];
  // Browser detector.
  $bd = new BrowserDetector($useragent);
  // The device type for the icon.
  $device_type = $bd->getDeviceType();
  // The device/browser description.
  $device_description = $bd->getFormattedDescription();
}